/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 0.99. DO NOT MODIFY.
*/
module Sha256_rotate8
    ( // Inputs
      input [255:0] h 
    , input [2047:0] w 

      // Outputs
    , output wire [255:0] result 
    );
  wire [2303:0] ws;
  wire [2047:0] \_INTERNAL_.ws1 ;
  wire [511:0] \#vec1_0 ;
  wire [2047:0] \#vec2_0 ;

  assign result = ws[256-1:0];

  assign ws = {h,\_INTERNAL_.ws1 };

  assign \#vec1_0  = {64'sd0
                     ,64'sd8
                     ,64'sd16
                     ,64'sd24
                     ,64'sd32
                     ,64'sd40
                     ,64'sd48
                     ,64'sd56};

  assign \#vec2_0  = (ws[2304-1 : 256]);

  // zipWith start
  genvar i_0;
  generate
  for (i_0 = 0; i_0 < 8; i_0 = i_0 + 1) begin : zipWith_0
    wire signed [63:0] zipWith_in1_0;
    assign zipWith_in1_0 = \#vec1_0 [i_0*64+:64];
    wire [255:0] zipWith_in2_0;
    assign zipWith_in2_0 = \#vec2_0 [i_0*256+:256];
    wire [255:0] \#n_0 ;
    wire [2303:0] ws2;
    wire [2047:0] \_INTERNAL_.ws3 ;
    wire [511:0] \#vec1 ;
    wire [2047:0] \#vec2 ;
      assign \#n_0  = ws2[256-1:0];

      assign ws2 = {zipWith_in2_0,\_INTERNAL_.ws3 };

      assign \#vec1  = {64'sd0
                       ,64'sd1
                       ,64'sd2
                       ,64'sd3
                       ,64'sd4
                       ,64'sd5
                       ,64'sd6
                       ,64'sd7};

      assign \#vec2  = (ws2[2304-1 : 256]);

      // zipWith start
      genvar i;

      for (i = 0; i < 8; i = i + 1) begin : zipWith
        wire signed [63:0] zipWith_in1;
        assign zipWith_in1 = \#vec1 [i*64+:64];
        wire [255:0] zipWith_in2;
        assign zipWith_in2 = \#vec2 [i*256+:256];
        wire [255:0] \#n ;
        wire [31:0] a;
        wire [31:0] b;
        wire [31:0] c;
        wire [31:0] d;
        wire [31:0] e;
        wire [31:0] f;
        wire [31:0] g;
        wire [31:0] h_0;
        wire [63:0] \x# ;
        wire [31:0] \#case_alt ;
        wire [63:0] \y# ;
        wire [63:0] \#app_arg ;
        wire [63:0] \#x#_0 ;
        wire [63:0] \#y#_0 ;
        wire [31:0] \#case_alt_0 ;
        wire [63:0] \x#2 ;
        wire [63:0] \#app_arg_0 ;
        wire [63:0] \#app_arg_1 ;
        wire [63:0] \#app_arg_2 ;
        wire [63:0] \#app_arg_3 ;
        wire [63:0] \#app_arg_4 ;
        wire [63:0] \#x#_1 ;
        wire [63:0] \#x#_2 ;
        wire [63:0] \#x#2_0 ;
        wire [63:0] \x#3 ;
        wire signed [63:0] x2;
        wire signed [63:0] y2;
        wire [63:0] \#y#_1 ;
        wire [31:0] \#t1_case_scrut ;
        wire [31:0] \#t1_case_alt ;
        wire [63:0] \y#1 ;
        wire [31:0] \#t1_case_scrut_0 ;
        wire [63:0] \#t1_app_arg ;
        wire [63:0] \#t1_app_arg_0 ;
        wire [63:0] \#t1_app_arg_1 ;
        wire [63:0] \#t1_app_arg_2 ;
        wire [63:0] \#t1_app_arg_3 ;
        wire [63:0] \#t1_app_arg_4 ;
        wire [63:0] \#t1_app_arg_5 ;
        wire signed [63:0] \#t1_app_arg_6 ;
        wire [63:0] \#w ;
        wire [63:0] \#w_0 ;
        wire [63:0] \#w_1 ;
        wire [63:0] \#w_2 ;
        wire [63:0] \#w_3 ;
        wire [63:0] \#w_4 ;
        wire [63:0] \#w_5 ;
        wire [63:0] \#w_6 ;
        wire [63:0] \#w_7 ;
        wire [63:0] \#w_8 ;
        wire [63:0] \#w_9 ;
        wire [63:0] \#w_10 ;
        wire [63:0] \#w_11 ;
          assign a = zipWith_in2[255:224];

          assign b = zipWith_in2[223:192];

          assign c = zipWith_in2[191:160];

          assign d = zipWith_in2[159:128];

          assign e = zipWith_in2[127:96];

          assign f = zipWith_in2[95:64];

          assign g = zipWith_in2[63:32];

          assign h_0 = zipWith_in2[31:0];

          assign \#n  = {\#case_alt_0 
                           ,a
                           ,b
                           ,c
                           ,\#case_alt 
                           ,e
                           ,f
                           ,g};

          assign \x#  = d;

          assign \#case_alt  = $unsigned(\#app_arg );

          assign \y#  = \#t1_case_alt ;

          assign \#w  = (\x#  + \y# );

          // narrow32Word begin
          assign \#app_arg  = $unsigned(\#w [31:0]);
          // narrow32Word end

          assign \#x#_0  = a;

          assign \#y#_0  = b;

          assign \#case_alt_0  = $unsigned(\#app_arg_0 );

          assign \x#2  = c;

          assign \#w_0  = (\y#  + \#app_arg_1 );

          // narrow32Word begin
          assign \#app_arg_0  = $unsigned(\#w_0 [31:0]);
          // narrow32Word end

          assign \#w_1  = (((((\#x#_0  >> 64'sd2) | \#app_arg_4 ) ^ ((\#x#_0  >> 64'sd13) | \#app_arg_3 )) ^ ((\#x#_0  >> 64'sd22) | \#app_arg_2 )) + ((\#x#_0  & \#y#_0 ) | (\x#2  & (\#x#_0  | \#y#_0 ))));

          // narrow32Word begin
          assign \#app_arg_1  = $unsigned(\#w_1 [31:0]);
          // narrow32Word end

          assign \#w_2  = (\#x#_0  << 64'sd10);

          // narrow32Word begin
          assign \#app_arg_2  = $unsigned(\#w_2 [31:0]);
          // narrow32Word end

          assign \#w_3  = (\#x#_0  << 64'sd19);

          // narrow32Word begin
          assign \#app_arg_3  = $unsigned(\#w_3 [31:0]);
          // narrow32Word end

          assign \#w_4  = (\#x#_0  << 64'sd30);

          // narrow32Word begin
          assign \#app_arg_4  = $unsigned(\#w_4 [31:0]);
          // narrow32Word end

          assign \#x#_1  = h_0;

          assign \#x#_2  = e;

          assign \#x#2_0  = g;

          assign \x#3  = f;

          assign x2 = zipWith_in1_0;

          assign y2 = zipWith_in1;

          assign \#y#_1  = \#t1_case_scrut ;

          Sha256_Component Sha256_Component_t1_case_scrut
            ( .\#case_alt  (\#t1_case_scrut )
            , .i (\#t1_app_arg_6 ) );

          assign \#t1_case_alt  = $unsigned(\#t1_app_arg );

          assign \y#1  = \#t1_case_scrut_0 ;

          Sha256_Component_0 Sha256_Component_0_t1_case_scrut_0
            ( .\#case_alt  (\#t1_case_scrut_0 )
            , .ds (w)
            , .i (\#t1_app_arg_6 ) );

          assign \#w_5  = (\#t1_app_arg_0  + \y#1 );

          // narrow32Word begin
          assign \#t1_app_arg  = $unsigned(\#w_5 [31:0]);
          // narrow32Word end

          assign \#w_6  = (\#t1_app_arg_1  + \#y#_1 );

          // narrow32Word begin
          assign \#t1_app_arg_0  = $unsigned(\#w_6 [31:0]);
          // narrow32Word end

          assign \#w_7  = (\#t1_app_arg_2  + (\#x#2_0  ^ (\#x#_2  & (\x#3  ^ \#x#2_0 ))));

          // narrow32Word begin
          assign \#t1_app_arg_1  = $unsigned(\#w_7 [31:0]);
          // narrow32Word end

          assign \#w_8  = (\#x#_1  + ((((\#x#_2  >> 64'sd6) | \#t1_app_arg_5 ) ^ ((\#x#_2  >> 64'sd11) | \#t1_app_arg_4 )) ^ ((\#x#_2  >> 64'sd25) | \#t1_app_arg_3 )));

          // narrow32Word begin
          assign \#t1_app_arg_2  = $unsigned(\#w_8 [31:0]);
          // narrow32Word end

          assign \#w_9  = (\#x#_2  << 64'sd7);

          // narrow32Word begin
          assign \#t1_app_arg_3  = $unsigned(\#w_9 [31:0]);
          // narrow32Word end

          assign \#w_10  = (\#x#_2  << 64'sd21);

          // narrow32Word begin
          assign \#t1_app_arg_4  = $unsigned(\#w_10 [31:0]);
          // narrow32Word end

          assign \#w_11  = (\#x#_2  << 64'sd26);

          // narrow32Word begin
          assign \#t1_app_arg_5  = $unsigned(\#w_11 [31:0]);
          // narrow32Word end

          assign \#t1_app_arg_6  = (x2 + y2);
        assign \_INTERNAL_.ws3 [i*256+:256] = \#n ;
      end

      // zipWith end
    assign \_INTERNAL_.ws1 [i_0*256+:256] = \#n_0 ;
  end
  endgenerate
  // zipWith end
endmodule

