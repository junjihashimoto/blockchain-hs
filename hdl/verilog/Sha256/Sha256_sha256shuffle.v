/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 0.99. DO NOT MODIFY.
*/
module Sha256_sha256shuffle
    ( // Inputs
      input [511:0] w67 


      // Outputs
    , output wire [2047:0] result 
    );
  wire [100351:0] ws1;
  wire [98303:0] \_INTERNAL_.ws2 ;
  wire [31:0] v1;
  wire [31:0] v2;
  wire [31:0] v3;
  wire [31:0] v4;
  wire [31:0] v5;
  wire [31:0] v6;
  wire [31:0] v7;
  wire [31:0] v8;
  wire [31:0] v9;
  wire [31:0] v10;
  wire [31:0] v11;
  wire [31:0] v12;
  wire [31:0] v13;
  wire [31:0] v14;
  wire [31:0] v15;
  wire [31:0] v16;
  wire [31:0] ws1_dc_arg_res;
  wire [31:0] ws1_dc_arg_res_0;
  wire [31:0] ws1_dc_arg_res_1;
  wire [31:0] ws1_dc_arg_res_2;
  wire [31:0] ws1_dc_arg_res_3;
  wire [31:0] ws1_dc_arg_res_4;
  wire [31:0] ws1_dc_arg_res_5;
  wire [31:0] ws1_dc_arg_res_6;
  wire [31:0] ws1_dc_arg_res_7;
  wire [31:0] ws1_dc_arg_res_8;
  wire [31:0] ws1_dc_arg_res_9;
  wire [31:0] ws1_dc_arg_res_10;
  wire [31:0] ws1_dc_arg_res_11;
  wire [31:0] ws1_dc_arg_res_12;
  wire [31:0] ws1_dc_arg_res_13;
  wire [31:0] ws1_dc_arg_res_14;
  wire [31:0] ws1_dc_arg_res_15;
  wire [31:0] ws1_dc_arg_res_16;
  wire [31:0] ws1_dc_arg_res_17;
  wire [31:0] ws1_dc_arg_res_18;
  wire [31:0] ws1_dc_arg_res_19;
  wire [31:0] ws1_dc_arg_res_20;
  wire [31:0] ws1_dc_arg_res_21;
  wire [31:0] ws1_dc_arg_res_22;
  wire [31:0] ws1_dc_arg_res_23;
  wire [31:0] ws1_dc_arg_res_24;
  wire [31:0] ws1_dc_arg_res_25;
  wire [31:0] ws1_dc_arg_res_26;
  wire [31:0] ws1_dc_arg_res_27;
  wire [31:0] ws1_dc_arg_res_28;
  wire [31:0] ws1_dc_arg_res_29;
  wire [31:0] ws1_dc_arg_res_30;
  wire [31:0] ws1_dc_arg_res_31;
  wire [31:0] ws1_dc_arg_res_32;
  wire [31:0] ws1_dc_arg_res_33;
  wire [31:0] ws1_dc_arg_res_34;
  wire [31:0] ws1_dc_arg_res_35;
  wire [31:0] ws1_dc_arg_res_36;
  wire [31:0] ws1_dc_arg_res_37;
  wire [31:0] ws1_dc_arg_res_38;
  wire [31:0] ws1_dc_arg_res_39;
  wire [31:0] ws1_dc_arg_res_40;
  wire [31:0] ws1_dc_arg_res_41;
  wire [31:0] ws1_dc_arg_res_42;
  wire [31:0] ws1_dc_arg_res_43;
  wire [31:0] ws1_dc_arg_res_44;
  wire [31:0] ws1_dc_arg_res_45;
  wire [31:0] ws1_dc_arg_res_46;
  wire [3071:0] \#vec1 ;
  wire [98303:0] \#vec2 ;

  assign result = ws1[2048-1:0];

  assign ws1_dc_arg_res = $unsigned(64'd0);

  assign ws1_dc_arg_res_0 = $unsigned(64'd0);

  assign ws1_dc_arg_res_1 = $unsigned(64'd0);

  assign ws1_dc_arg_res_2 = $unsigned(64'd0);

  assign ws1_dc_arg_res_3 = $unsigned(64'd0);

  assign ws1_dc_arg_res_4 = $unsigned(64'd0);

  assign ws1_dc_arg_res_5 = $unsigned(64'd0);

  assign ws1_dc_arg_res_6 = $unsigned(64'd0);

  assign ws1_dc_arg_res_7 = $unsigned(64'd0);

  assign ws1_dc_arg_res_8 = $unsigned(64'd0);

  assign ws1_dc_arg_res_9 = $unsigned(64'd0);

  assign ws1_dc_arg_res_10 = $unsigned(64'd0);

  assign ws1_dc_arg_res_11 = $unsigned(64'd0);

  assign ws1_dc_arg_res_12 = $unsigned(64'd0);

  assign ws1_dc_arg_res_13 = $unsigned(64'd0);

  assign ws1_dc_arg_res_14 = $unsigned(64'd0);

  assign ws1_dc_arg_res_15 = $unsigned(64'd0);

  assign ws1_dc_arg_res_16 = $unsigned(64'd0);

  assign ws1_dc_arg_res_17 = $unsigned(64'd0);

  assign ws1_dc_arg_res_18 = $unsigned(64'd0);

  assign ws1_dc_arg_res_19 = $unsigned(64'd0);

  assign ws1_dc_arg_res_20 = $unsigned(64'd0);

  assign ws1_dc_arg_res_21 = $unsigned(64'd0);

  assign ws1_dc_arg_res_22 = $unsigned(64'd0);

  assign ws1_dc_arg_res_23 = $unsigned(64'd0);

  assign ws1_dc_arg_res_24 = $unsigned(64'd0);

  assign ws1_dc_arg_res_25 = $unsigned(64'd0);

  assign ws1_dc_arg_res_26 = $unsigned(64'd0);

  assign ws1_dc_arg_res_27 = $unsigned(64'd0);

  assign ws1_dc_arg_res_28 = $unsigned(64'd0);

  assign ws1_dc_arg_res_29 = $unsigned(64'd0);

  assign ws1_dc_arg_res_30 = $unsigned(64'd0);

  assign ws1_dc_arg_res_31 = $unsigned(64'd0);

  assign ws1_dc_arg_res_32 = $unsigned(64'd0);

  assign ws1_dc_arg_res_33 = $unsigned(64'd0);

  assign ws1_dc_arg_res_34 = $unsigned(64'd0);

  assign ws1_dc_arg_res_35 = $unsigned(64'd0);

  assign ws1_dc_arg_res_36 = $unsigned(64'd0);

  assign ws1_dc_arg_res_37 = $unsigned(64'd0);

  assign ws1_dc_arg_res_38 = $unsigned(64'd0);

  assign ws1_dc_arg_res_39 = $unsigned(64'd0);

  assign ws1_dc_arg_res_40 = $unsigned(64'd0);

  assign ws1_dc_arg_res_41 = $unsigned(64'd0);

  assign ws1_dc_arg_res_42 = $unsigned(64'd0);

  assign ws1_dc_arg_res_43 = $unsigned(64'd0);

  assign ws1_dc_arg_res_44 = $unsigned(64'd0);

  assign ws1_dc_arg_res_45 = $unsigned(64'd0);

  assign ws1_dc_arg_res_46 = $unsigned(64'd0);

  assign ws1 = {{v1
                ,v2
                ,v3
                ,v4
                ,v5
                ,v6
                ,v7
                ,v8
                ,v9
                ,v10
                ,v11
                ,v12
                ,v13
                ,v14
                ,v15
                ,v16
                ,ws1_dc_arg_res
                ,ws1_dc_arg_res_0
                ,ws1_dc_arg_res_1
                ,ws1_dc_arg_res_2
                ,ws1_dc_arg_res_3
                ,ws1_dc_arg_res_4
                ,ws1_dc_arg_res_5
                ,ws1_dc_arg_res_6
                ,ws1_dc_arg_res_7
                ,ws1_dc_arg_res_8
                ,ws1_dc_arg_res_9
                ,ws1_dc_arg_res_10
                ,ws1_dc_arg_res_11
                ,ws1_dc_arg_res_12
                ,ws1_dc_arg_res_13
                ,ws1_dc_arg_res_14
                ,ws1_dc_arg_res_15
                ,ws1_dc_arg_res_16
                ,ws1_dc_arg_res_17
                ,ws1_dc_arg_res_18
                ,ws1_dc_arg_res_19
                ,ws1_dc_arg_res_20
                ,ws1_dc_arg_res_21
                ,ws1_dc_arg_res_22
                ,ws1_dc_arg_res_23
                ,ws1_dc_arg_res_24
                ,ws1_dc_arg_res_25
                ,ws1_dc_arg_res_26
                ,ws1_dc_arg_res_27
                ,ws1_dc_arg_res_28
                ,ws1_dc_arg_res_29
                ,ws1_dc_arg_res_30
                ,ws1_dc_arg_res_31
                ,ws1_dc_arg_res_32
                ,ws1_dc_arg_res_33
                ,ws1_dc_arg_res_34
                ,ws1_dc_arg_res_35
                ,ws1_dc_arg_res_36
                ,ws1_dc_arg_res_37
                ,ws1_dc_arg_res_38
                ,ws1_dc_arg_res_39
                ,ws1_dc_arg_res_40
                ,ws1_dc_arg_res_41
                ,ws1_dc_arg_res_42
                ,ws1_dc_arg_res_43
                ,ws1_dc_arg_res_44
                ,ws1_dc_arg_res_45
                ,ws1_dc_arg_res_46}
               ,\_INTERNAL_.ws2 };

  assign \#vec1  = {64'sd16
                   ,64'sd17
                   ,64'sd18
                   ,64'sd19
                   ,64'sd20
                   ,64'sd21
                   ,64'sd22
                   ,64'sd23
                   ,64'sd24
                   ,64'sd25
                   ,64'sd26
                   ,64'sd27
                   ,64'sd28
                   ,64'sd29
                   ,64'sd30
                   ,64'sd31
                   ,64'sd32
                   ,64'sd33
                   ,64'sd34
                   ,64'sd35
                   ,64'sd36
                   ,64'sd37
                   ,64'sd38
                   ,64'sd39
                   ,64'sd40
                   ,64'sd41
                   ,64'sd42
                   ,64'sd43
                   ,64'sd44
                   ,64'sd45
                   ,64'sd46
                   ,64'sd47
                   ,64'sd48
                   ,64'sd49
                   ,64'sd50
                   ,64'sd51
                   ,64'sd52
                   ,64'sd53
                   ,64'sd54
                   ,64'sd55
                   ,64'sd56
                   ,64'sd57
                   ,64'sd58
                   ,64'sd59
                   ,64'sd60
                   ,64'sd61
                   ,64'sd62
                   ,64'sd63};

  assign \#vec2  = (ws1[100352-1 : 2048]);

  // zipWith start
  genvar i;
  generate
  for (i = 0; i < 48; i = i + 1) begin : zipWith
    wire signed [63:0] zipWith_in1;
    assign zipWith_in1 = \#vec1 [i*64+:64];
    wire [2047:0] zipWith_in2;
    assign zipWith_in2 = \#vec2 [i*2048+:2048];
    wire [2047:0] \#n ;
    wire signed [63:0] x1;
    wire [63:0] \x# ;
    wire [31:0] \#case_scrut ;
    wire [63:0] \y# ;
    wire [31:0] \#case_scrut_0 ;
    wire [63:0] \x#1 ;
    wire [31:0] \#case_scrut_1 ;
    wire [31:0] \#case_alt ;
    wire [63:0] \y#1 ;
    wire [31:0] \#case_scrut_2 ;
    wire [63:0] \#app_arg ;
    wire [63:0] \#app_arg_0 ;
    wire [63:0] \#app_arg_1 ;
    wire [63:0] \#app_arg_2 ;
    wire [63:0] \#app_arg_3 ;
    wire [63:0] \#app_arg_4 ;
    wire [63:0] \#app_arg_5 ;
    wire signed [63:0] \#case_scrut_fun_arg ;
    wire signed [63:0] \#case_scrut_0_fun_arg ;
    wire signed [63:0] \#case_scrut_1_fun_arg ;
    wire signed [63:0] \#case_scrut_2_fun_arg ;
    wire [63:0] \#w ;
    wire [63:0] \#w_0 ;
    wire [63:0] \#w_1 ;
    wire [63:0] \#w_2 ;
    wire [63:0] \#w_3 ;
    wire [63:0] \#w_4 ;
    wire [63:0] \#w_5 ;
      assign x1 = zipWith_in1;

      assign \x#  = \#case_scrut ;

      assign \#case_scrut_fun_arg  = (x1 - 64'sd2);

      Sha256_Component_0 Sha256_Component_0_case_scrut
        ( .\#case_alt  (\#case_scrut )
        , .ds (zipWith_in2)
        , .i (\#case_scrut_fun_arg ) );

      assign \y#  = \#case_scrut_0 ;

      assign \#case_scrut_0_fun_arg  = (x1 - 64'sd7);

      Sha256_Component_0 Sha256_Component_0_case_scrut_0
        ( .\#case_alt  (\#case_scrut_0 )
        , .ds (zipWith_in2)
        , .i (\#case_scrut_0_fun_arg ) );

      assign \x#1  = \#case_scrut_1 ;

      assign \#case_scrut_1_fun_arg  = (x1 - 64'sd15);

      Sha256_Component_0 Sha256_Component_0_case_scrut_1
        ( .\#case_alt  (\#case_scrut_1 )
        , .ds (zipWith_in2)
        , .i (\#case_scrut_1_fun_arg ) );

      assign \#case_alt  = $unsigned(\#app_arg );

      assign \y#1  = \#case_scrut_2 ;

      assign \#case_scrut_2_fun_arg  = (x1 - 64'sd16);

      Sha256_Component_0 Sha256_Component_0_case_scrut_2
        ( .\#case_alt  (\#case_scrut_2 )
        , .ds (zipWith_in2)
        , .i (\#case_scrut_2_fun_arg ) );

      assign \#w  = (\#app_arg_0  + \y#1 );

      // narrow32Word begin
      assign \#app_arg  = $unsigned(\#w [31:0]);
      // narrow32Word end

      assign \#w_0  = (\#app_arg_3  + ((((\x#1  >> 64'sd7) | \#app_arg_2 ) ^ ((\x#1  >> 64'sd18) | \#app_arg_1 )) ^ (\x#1  >> 64'sd3)));

      // narrow32Word begin
      assign \#app_arg_0  = $unsigned(\#w_0 [31:0]);
      // narrow32Word end

      assign \#w_1  = (\x#1  << 64'sd14);

      // narrow32Word begin
      assign \#app_arg_1  = $unsigned(\#w_1 [31:0]);
      // narrow32Word end

      assign \#w_2  = (\x#1  << 64'sd25);

      // narrow32Word begin
      assign \#app_arg_2  = $unsigned(\#w_2 [31:0]);
      // narrow32Word end

      assign \#w_3  = (((((\x#  >> 64'sd17) | \#app_arg_5 ) ^ ((\x#  >> 64'sd19) | \#app_arg_4 )) ^ (\x#  >> 64'sd10)) + \y# );

      // narrow32Word begin
      assign \#app_arg_3  = $unsigned(\#w_3 [31:0]);
      // narrow32Word end

      assign \#w_4  = (\x#  << 64'sd13);

      // narrow32Word begin
      assign \#app_arg_4  = $unsigned(\#w_4 [31:0]);
      // narrow32Word end

      assign \#w_5  = (\x#  << 64'sd15);

      // narrow32Word begin
      assign \#app_arg_5  = $unsigned(\#w_5 [31:0]);
      // narrow32Word end

      Sha256_setV Sha256_setV_RESULT
        ( .\#case_alt  (\#n )
        , .t (zipWith_in2)
        , .i (zipWith_in1)
        , .v (\#case_alt ) );
    assign \_INTERNAL_.ws2 [i*2048+:2048] = \#n ;
  end
  endgenerate
  // zipWith end

  assign v1 = w67[511:480];

  assign v2 = w67[479:448];

  assign v3 = w67[447:416];

  assign v4 = w67[415:384];

  assign v5 = w67[383:352];

  assign v6 = w67[351:320];

  assign v7 = w67[319:288];

  assign v8 = w67[287:256];

  assign v9 = w67[255:224];

  assign v10 = w67[223:192];

  assign v11 = w67[191:160];

  assign v12 = w67[159:128];

  assign v13 = w67[127:96];

  assign v14 = w67[95:64];

  assign v15 = w67[63:32];

  assign v16 = w67[31:0];
endmodule

